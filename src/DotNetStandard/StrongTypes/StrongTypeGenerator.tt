<#@ template debug="false" hostspecific="True" language="C#"
#><#@assembly name="EnvDTE"
#><#@assembly name="System.Core"
#><#@assembly name="System.Xml"
#><#@assembly name="System.Xml.Linq"
#><#@import namespace="System.Collections.Generic"
#><#@import namespace="System.Linq"
#><#@import namespace="System.Linq.Expressions"
#><#@import namespace="System.Reflection"
#><#@import namespace="System.Text"
#><#@import namespace="System.Xml.Linq"
#><#@import namespace="System.Xml.Schema"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#><#
Host.SetFileExtension(".cs");

// Prepare namespace
var hostServiceProvider = (IServiceProvider)Host;
if (hostServiceProvider == null)
	throw new ArgumentNullException("Could not obtain IServiceProvider");
var dte = (EnvDTE.DTE) hostServiceProvider.GetCOMService(typeof(EnvDTE.DTE));
if (dte == null)
	throw new ArgumentNullException("Could not obtain DTE from host");
var templateProjectItem = dte.Solution.FindProjectItem(Host.TemplateFile);
var defaultNamespace = templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();

/***********************************/
/*             HEADER              */
/***********************************/
#>// ReSharper disable IdentifierTypo
// ReSharper disable CommentTypo
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable InheritdocConsiderUsage
// ReSharper disable RedundantNameQualifier
// ReSharper disable HeuristicUnreachableCode
// ReSharper disable ReferenceEqualsWithValueType
// ReSharper disable ConditionIsAlwaysTrueOrFalse
// ReSharper disable NonReadonlyMemberInGetHashCode
// ReSharper disable RedundantCast
// ReSharper disable RedundantCast.0
// ReSharper disable SpecifyACultureInStringConversionExplicitly
// ReSharper disable ArrangeThisQualifier
// ReSharper disable StringCompareToIsCultureSpecific
// ReSharper disable RedundantToStringCall

using System;
using System.CodeDom.Compiler;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.Serialization;
using System.Security.Permissions;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using JetBrains.Annotations;

<# var ns = defaultNamespace + ".StrongTypes"; #>
namespace <#= ns #>
{
<#

/***********************************/
/*            CONTENT              */
/***********************************/
var configurationFilePath = Host.ResolvePath("StrongTypesConfiguration.xml");
var configDoc = XDocument.Load(configurationFilePath);
var schemaSet = LoadSchemaSet(Host, configDoc);
configDoc.Validate(schemaSet, OnSchemaValidationError);
XNamespace xmlNamespace = "https://www.github.com/Herdo/strongtypes";
var strongTypes = configDoc.Root.Descendants(xmlNamespace + "strongType").ToArray();
var first = true;
foreach (XElement strongType in strongTypes)
{
	var typeName = strongType.Attribute("name").Value;
	var internalType = strongType.Attribute("internalType").Value;

	XAttribute provideNewtonsoftJsonConverterAttribute = strongType.Attribute("provideNewtonsoftJsonConverter");
	bool provideNewtonsoftJsonConverter = provideNewtonsoftJsonConverterAttribute == null ? true : (bool)provideNewtonsoftJsonConverterAttribute;
	XAttribute provideSystemTextJsonConverterAttribute = strongType.Attribute("provideSystemTextJsonConverter");
	bool provideSystemTextJsonConverter = provideSystemTextJsonConverterAttribute == null ? true : (bool)provideSystemTextJsonConverterAttribute;

	XElement validateElement = strongType.Element(xmlNamespace + "validate");
	bool validate = validateElement == null ? false : (bool)validateElement;
	XElement formatStringElement = strongType.Element(xmlNamespace + "formatString");
	string formatString = formatStringElement == null ? null : formatStringElement.Value;
	XElement customDescriptionElement = strongType.Element(xmlNamespace + "customDescription");
	XCData customDescriptionValue = customDescriptionElement == null ? null : (XCData)customDescriptionElement.FirstNode;
	string customDescription = customDescriptionValue == null ? null : customDescriptionValue.Value;
	XElement[] excludeOperatorElements = strongType.Elements(xmlNamespace + "excludeOperator").ToArray();
	string[] excludeOperators = excludeOperatorElements.Length == 0 ? null : excludeOperatorElements.Select(m => m.Value).ToArray();
	
	if(first)
	{
		first = false;
	}
	else
	{
#>

<#
	}
#>
	/// <summary>
	/// <#= CustomDescriptionText(typeName, customDescription) #>
	/// </summary>
	[GeneratedCode("Herdo.StrongTypes.StrongTypeGenerator", "2.0.0")]
	[Serializable]
	<# if (provideNewtonsoftJsonConverter) { #>[Newtonsoft.Json.JsonConverter(typeof(<#= typeName #>.NewtonsoftJsonConverter))]
<# } #>
	<# if (provideSystemTextJsonConverter) { #>[System.Text.Json.Serialization.JsonConverter(typeof(<#= typeName #>.SystemTextJsonConverter))]
<# } #>
	public partial struct <#= typeName #><#= BuildDerivation(typeName) #>
	{
        /// <summary>
        /// Actual backing property which holds the value.
        /// </summary>
        /// <remarks>This property is basically readonly, but must be non-readonly due to the XML-deserialization which will be called from outside the constructor.</remarks>
        [UsedImplicitly]
		public <#= internalType #> V { get; set; }

		[ExcludeFromCodeCoverage]
		private <#= typeName #>(<#= internalType #> value)
	    {
	        V = <#= AddValidation(validate, "value") #>;
	    }

		[ExcludeFromCodeCoverage]
		private <#= typeName #>(SerializationInfo info, StreamingContext context)
		{
<#
			var callInputCtor = string.Format("({0})info.GetValue(\"v\", typeof({0}))", internalType);
#>
            V = <#= AddValidation(validate, callInputCtor) #>;
		}

	    /// <summary>
	    /// Converts the weak type into a <see cref="<#= typeName #>"/> instance.
	    /// </summary>
	    /// <param name="value">The value to convert.</param>
	    /// <returns>A new instance of the strong type.</returns>
		[ExcludeFromCodeCoverage]
	    public static explicit operator <#= typeName #>(<#= internalType #> value)
	    {
	        return new <#= typeName #>(value);
	    }

	    /// <summary>
	    /// Converts the strong type into a <see cref="<#= internalType #>"/> value.
	    /// </summary>
	    /// <param name="value">The instance to convert.</param>
	    /// <returns>The converted value.</returns>
		[ExcludeFromCodeCoverage]
	    public static explicit operator <#= internalType #>(<#= typeName #> value)
	    {
	        return value.V;
	    }

		/// <summary>
        /// Returns a value indicating whether this instance and a specified <see cref="<#= typeName #>"/> object represent the same value.
        /// </summary>
        /// <param name="other">An object to compare to this instance.</param>
        /// <returns><b>true</b> if <paramref name="other"/> is equal to this instance; otherwise, <b>false</b>.</returns>
		[ExcludeFromCodeCoverage]
		public bool Equals(<#= typeName #> other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;
			return <#= GetEqualsImplementation(Type.GetType(internalType), "this", "other") #>;
		}
		
		/// <summary>
        /// Returns a value indicating whether this instance and a specified object represent the same value.
        /// </summary>
        /// <param name="other">An object to compare to this instance.</param>
        /// <returns><b>true</b> if <paramref name="other"/> is equal to this instance; otherwise, <b>false</b>.</returns>
		[ExcludeFromCodeCoverage]
		public override bool Equals(object other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;
			return Equals((<#= typeName #>)other);
		}

		/// <summary>
        /// Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current <see cref="<#= typeName #>"/>.</returns>
		[ExcludeFromCodeCoverage]
		public override int GetHashCode()
		{
			if (Equals(null, V))
				return 0;
			return V.GetHashCode();
		}

		/// <summary>
        /// Compares this instance to a specified <see cref="<#= typeName #>"/> and returns an indication of their relative values.
        /// </summary>
        /// <param name="other">A <see cref="<#= typeName #>"/> to compare to.</param>
        /// <returns>A signed integer that indicates the relative order of this instance and <paramref name="other"/>.</returns>
		[ExcludeFromCodeCoverage]
		public int CompareTo(<#= typeName #> other)
		{
			if (Equals(null, V))
				return 1;
			return V.CompareTo(other.V);
		}
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.Equal)) { #>

        /// <summary>
        /// Checks if both operands are equal.
        /// </summary>
        /// <param name="first">The first operand.</param>
        /// <param name="second">The second operand.</param>
        /// <returns><b>True</b>, if both operands are equal; otherwise, <b>false</b>.</returns>
        [ExcludeFromCodeCoverage]
        public static bool operator ==(<#= typeName #> first, <#= typeName #> second)
	    {
	        if (ReferenceEquals(first, second))
	            return true;

			return <#= GetEqualsImplementation(Type.GetType(internalType), "first", "second") #>;
	    }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.NotEqual)) { #>

        /// <summary>
        /// Checks if both operands are not equal.
        /// </summary>
        /// <param name="first">The first operand.</param>
        /// <param name="second">The second operand.</param>
        /// <returns><b>False</b>, if both operands are equal; otherwise, <b>true</b>.</returns>
        [ExcludeFromCodeCoverage]
        public static bool operator !=(<#= typeName #> first, <#= typeName #> second)
	    {
	        return !(first == second);
	    }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.LessThan)) { #>
		
	    /// <summary>
	    /// Checks if the first operand is less than the second one.
	    /// </summary>
        /// <param name="first">The first operand.</param>
        /// <param name="second">The second operand.</param>
	    /// <returns><b>True</b>, if the <paramref name="first"/> operand is less than the <paramref name="second"/>; otherwise, <b>false</b>.</returns>
        [ExcludeFromCodeCoverage]
        public static bool operator <(<#= typeName #> first, <#= typeName #> second)
	    {
	        return first.V < second.V;
	    }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.GreaterThan)) { #>

	    /// <summary>
	    /// Checks if the first operand is greater than the second one.
	    /// </summary>
        /// <param name="first">The first operand.</param>
        /// <param name="second">The second operand.</param>
	    /// <returns><b>True</b>, if the <paramref name="first"/> operand is greater than the <paramref name="second"/>; otherwise, <b>false</b>.</returns>
        [ExcludeFromCodeCoverage]
        public static bool operator >(<#= typeName #> first, <#= typeName #> second)
	    {
	        return first.V > second.V;
	    }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.LessThanOrEqual)) { #>

	    /// <summary>
	    /// Checks if the first operand is less than or equal to the second operand.
	    /// </summary>
        /// <param name="first">The first operand.</param>
        /// <param name="second">The second operand.</param>
	    /// <returns><b>True</b>, if the <paramref name="first"/> operand is less than or equal to the <paramref name="second"/>; otherwise, <b>false</b>.</returns>
        [ExcludeFromCodeCoverage]
        public static bool operator <=(<#= typeName #> first, <#= typeName #> second)
	    {
	        return first.V <= second.V;
	    }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.GreaterThanOrEqual)) { #>

        /// <summary>
        /// Checks if the first operand is greater than or equal to the second operand.
        /// </summary>
        /// <param name="first">The first operand.</param>
        /// <param name="second">The second operand.</param>
	    /// <returns><b>True</b>, if the <paramref name="first"/> operand is greater than or equal to the <paramref name="second"/>; otherwise, <b>false</b>.</returns>
        [ExcludeFromCodeCoverage]
        public static bool operator >=(<#= typeName #> first, <#= typeName #> second)
	    {
	        return first.V >= second.V;
        }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.Add)) { #>

        /// <summary>
        /// Adds the two summands.
        /// </summary>
        /// <param name="summand1">The left operand.</param>
        /// <param name="summand2">The right operand.</param>
        /// <exception cref="InvalidCastException">The validation of the sum failed.</exception>
        /// <returns>The sum.</returns>
        [ExcludeFromCodeCoverage]
        public static <#= typeName #> operator +(<#= typeName #> summand1, <#= typeName #> summand2)
        {
            return (<#= typeName #>) (summand1.V + summand2.V);
        }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.Subtract)) { #>

        /// <summary>
        /// Substracts the <paramref name="subtrahend"/> from the <paramref name="minuend"/>.
        /// </summary>
        /// <param name="minuend">The left operand.</param>
        /// <param name="subtrahend">The right operand.</param>
        /// <exception cref="InvalidCastException">The validation of the difference value failed.</exception>
        /// <returns>The difference value.</returns>
        [ExcludeFromCodeCoverage]
        public static <#= GetSubtractResultType(typeName, Type.GetType(internalType)) #> operator -(<#= typeName #> minuend, <#= typeName #> subtrahend)
        {
            return (<#= GetSubtractResultType(typeName, Type.GetType(internalType)) #>)(minuend.V - subtrahend.V);
        }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.Increment)) { #>

        /// <summary>
        /// Increments the <paramref name="value"/> by 1.
        /// </summary>
        /// <param name="value">The value to increment.</param>
        /// <exception cref="InvalidCastException">The validation of the incremented value failed.</exception>
        /// <returns>The incremented value.</returns>
        [ExcludeFromCodeCoverage]
        public static <#= typeName #> operator ++(<#= typeName #> value)
	    {
	        return (<#= typeName #>) (++value.V);
        }
<# } #>
<# if (HasOperator(Type.GetType(internalType), excludeOperators, Expression.Decrement)) { #>

        /// <summary>
        /// Decrements the <paramref name="value"/> by 1.
        /// </summary>
        /// <param name="value">The value to decrement.</param>
        /// <exception cref="InvalidCastException">The validation of the decremented value failed.</exception>
        /// <returns>The decremented value.</returns>
        [ExcludeFromCodeCoverage]
        public static <#= typeName #> operator --(<#= typeName #> value)
	    {
	        return (<#= typeName #>) (--value.V);
        }
<# } #>

		/// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
		[ExcludeFromCodeCoverage]
	    public override string ToString()
	    {
	        if ((object)V == null)
#pragma warning disable CS8603 // Possible null reference return.
	            return null;
#pragma warning restore CS8603 // Possible null reference return.
	        return <#= FormatStringOutput(internalType, formatString) #>;
	    }
		<# if (validate) { #>
		
		[ExcludeFromCodeCoverage]
		private static <#= internalType #> Validate(<#= internalType #> value)
		{
		    var isValid = true;
			string validationError = null;
			ValidateInternalValue(value, ref isValid, ref validationError);
			if (!isValid)
				throw new InvalidCastException("Invalid cast into the strong type. The validation failed. Error: " + validationError);
			return value;
		}

		static partial void ValidateInternalValue(<#= internalType #> value, ref bool isValid, ref string validationError);
		<# } if (Type.GetType(internalType) == typeof(System.DateTime)) { #>
		
		[ExcludeFromCodeCoverage]
		private static XmlDateTimeSerializationMode GetSerializationMode(DateTime value)
		{
		    switch (value.Kind)
		    {
		        case DateTimeKind.Utc:
                    return XmlDateTimeSerializationMode.Utc;
		        case DateTimeKind.Local:
                    return XmlDateTimeSerializationMode.Local;
		        default:
		            return XmlDateTimeSerializationMode.Unspecified;
            }
		}
		<# } #>
		
		[ExcludeFromCodeCoverage]
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
		{
			info.AddValue("v", V);
		}
		
		[ExcludeFromCodeCoverage]
		XmlSchema IXmlSerializable.GetSchema()
	    {
#pragma warning disable CS8603 // Possible null reference return.
	        return null;
#pragma warning restore CS8603 // Possible null reference return.
	    }
		
		[ExcludeFromCodeCoverage]
	    void IXmlSerializable.ReadXml(XmlReader reader)
	    {
<#
			var callInputReadXml = CreateReadXmlCallInput(internalType);
#>
	        V = <#= AddValidation(validate, callInputReadXml) #>;
	    }
		
		[ExcludeFromCodeCoverage]
	    void IXmlSerializable.WriteXml(XmlWriter writer)
	    {
            writer.WriteString(<#= ConvertValueToXml(internalType) #>);
	    }

		<# if (provideNewtonsoftJsonConverter) { #>public sealed class NewtonsoftJsonConverter : Newtonsoft.Json.JsonConverter
        {
		    [ExcludeFromCodeCoverage]
            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
			{
				var instance = (<#= typeName #>)value;
				writer.WriteValue(instance.V);
			}
			
		    [ExcludeFromCodeCoverage]
            public override object ReadJson(Newtonsoft.Json.JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
			    if (reader.Value == null && Nullable.GetUnderlyingType(objectType) != null)
				    return null;

                var instance = default(<#= typeName #>);
                instance.V = (<#= internalType #>) Convert.ChangeType(reader.Value, typeof(<#= internalType #>));
                return instance;
			}
			
		    [ExcludeFromCodeCoverage]
            public override bool CanConvert(Type objectType) => objectType == typeof(<#= typeName #>);
        }
<# } #>
        
        <# if (provideSystemTextJsonConverter) { #>public sealed class SystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<<#= typeName #>>
        {
		    [ExcludeFromCodeCoverage]
            public override <#= typeName #> Read(ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
            {
                return (<#= typeName #>)reader.Get<#= internalType.Replace("System.", "") #>();
            }

			[ExcludeFromCodeCoverage]
            public override void Write(System.Text.Json.Utf8JsonWriter writer, <#= typeName #> value, System.Text.Json.JsonSerializerOptions options)
            {
				writer.Write<#= GetSystemTextJsonWriteMethodType(internalType) #>Value(value.V);
            }
        }
<# } #>
    }
<#
}

/***********************************/
/*             FOOTER              */
/***********************************/
#>}<#+
/***********************************/
/*             HELPER              */
/***********************************/
private static XmlSchemaSet LoadSchemaSet(ITextTemplatingEngineHost host, XDocument doc)
{
	const string expectedSchemaNamespaceName = "https://www.github.com/Herdo/strongtypes";
	XNamespace xsiNamespace = "http://www.w3.org/2001/XMLSchema-instance";
	var schemas = doc.Root.Attribute(xsiNamespace + "schemaLocation").Value;
	var split = schemas.Split(' ');
	string relativeSchemaNamespaceLocation = null;
	for (var i = 0; i < split.Length; i += 2)
	{
		var schemaNamespace = split[i];
		if (schemaNamespace != expectedSchemaNamespaceName)
			continue;
		relativeSchemaNamespaceLocation = split[i + 1];
		break;
	}
	if (relativeSchemaNamespaceLocation == null)
		throw new InvalidOperationException("The XML-Schema couldn't be determined.");

	var schemaPath = host.ResolvePath(relativeSchemaNamespaceLocation);
	var schemaSet = new XmlSchemaSet();
	schemaSet.Add(expectedSchemaNamespaceName, schemaPath);
	return schemaSet;
}

private static void OnSchemaValidationError(object sender, ValidationEventArgs e)
{
	throw e.Exception;
}

private static string CustomDescriptionText(string typeName, string customDescription)
{
	if (customDescription == null)
		return string.Format("Implements the strong type <see cref=\"{0}\" />.", typeName);
	return customDescription;
}

private static string BuildDerivation(string typeName)
{
	var sb = new StringBuilder(" : ");
	sb.Append(string.Format("IEquatable<{0}>, IComparable<{0}>, ISerializable, IXmlSerializable", typeName));
	return sb.ToString();
}

private static string AddValidation(bool validate, string callInput)
{
	return validate
		? string.Format("Validate({0})", callInput)
		: callInput;
}

private static string FormatStringOutput(string internalType, string formatString)
{
	if (formatString == null)
		return "V.ToString()";
	var t = Type.GetType(internalType);
	if (t == typeof(string))
		return string.Format("String.Format(\"{0}\", V)", formatString);
	return string.Format("V.ToString(\"{0}\")", formatString);
}

public static string CreateReadXmlCallInput(string internalType)
{
	var t = Type.GetType(internalType);
	if (t == typeof(System.Guid))
	{
		return "Guid.Parse((System.String)reader.ReadElementContentAs(typeof(System.String), null))";
	}
	return string.Format("({0})reader.ReadElementContentAs(typeof({0}), null)", internalType);
}

public static string ConvertValueToXml(string internalType)
{
	var t = Type.GetType(internalType);
	if (t == typeof(System.DateTime))
	{
		return "XmlConvert.ToString(V, GetSerializationMode(V))";
	}
	else if (t == typeof(System.String))
	{
		return "V";
	}
	else
	{
		return "XmlConvert.ToString(V)";
	}
}

public static string GetSystemTextJsonWriteMethodType(string internalType)
{
	var t = Type.GetType(internalType);
	if (t == typeof(System.Boolean))
	    return "Boolean";
	if (t == typeof(System.Byte)
	 || t == typeof(System.SByte)
	 || t == typeof(System.UInt16)
	 || t == typeof(System.UInt32)
	 || t == typeof(System.UInt64)
	 || t == typeof(System.Int16)
	 || t == typeof(System.Int32)
	 || t == typeof(System.Int64)
	 || t == typeof(System.Decimal)
	 || t == typeof(System.Double)
	 || t == typeof(System.Single))
	    return "Number";
	return "String";
}

public static string GetSubtractResultType(string typeName, Type t)
{
    if (t == typeof(System.DateTime) || t == typeof(System.DateTimeOffset))
	    return "System.TimeSpan";
	return typeName;
}

public static string GetEqualsImplementation(Type t, string left, string right)
{
	if (t == typeof(System.Single))
	{
	    return string.Format("Math.Abs({0}.V - {0}.V) < System.Single.Epsilon", left, right);
	}
	if (t == typeof(System.Double))
	{
	    return string.Format("Math.Abs({0}.V - {0}.V) < System.Double.Epsilon", left, right);
	}

	return string.Format("{0}.V == {1}.V", left, right);
}

// Exceptions for HasOperator method
private static readonly Dictionary<Type, Func<Expression, Expression, BinaryExpression>[]> _binaryExpressionExceptions = new Dictionary<Type, Func<Expression, Expression, BinaryExpression>[]>
{
	{typeof(System.Byte), new Func<Expression, Expression, BinaryExpression>[] { Expression.Add, Expression.Subtract }},
	{typeof(System.SByte), new Func<Expression, Expression, BinaryExpression>[] { Expression.Add, Expression.Subtract }}
};

// Exceptions for HasOperator method
private static readonly Dictionary<Type, Func<Expression, UnaryExpression>[]> _unaryExpressionExceptions = new Dictionary<Type, Func<Expression, UnaryExpression>[]>
{
	{typeof(System.Byte), new Func<Expression, UnaryExpression>[] { Expression.Increment, Expression.Decrement }},
	{typeof(System.SByte), new Func<Expression, UnaryExpression>[] { Expression.Increment, Expression.Decrement }}
};

private static bool HasOperator(System.Type type, string[] excludedOperators, Func<Expression, Expression, BinaryExpression> a)
{
	// Check if the operator shouldn't be generated
	// The name of the operator to exclude most exist in 'excludedOperators'
	var name = a.GetMethodInfo().Name;
	if (excludedOperators != null
	 && excludedOperators.Contains(name))
	{
		return false;
	}

	// Create default for expression execution
	object def = type.IsValueType
		? Activator.CreateInstance(type)
		: null;
	var ce = Expression.Constant(def, type);
	
	// Check if the operator is defined
	try
	{
		// If the operator is defined for the underlying type, the following operation is successful
		a(ce, ce);
		return true;
	}
	catch
	{
		// If the operatior isn't defined, an exception is thrown.
		// But there can be an exception for the underlying type.
		// If the type is defined as an exception, and the operator is defined as an exception as well,
		// True will be returned. If the exception isn't defined, False will be returned.
		return _binaryExpressionExceptions.ContainsKey(type)
			&& _binaryExpressionExceptions[type].Contains(a);
	}
}

private static bool HasOperator(System.Type type, string[] excludedOperators, Func<Expression, UnaryExpression> a)
{
	// Check if the operator shouldn't be generated
	// The name of the operator to exclude most exist in 'excludedOperators'
	var name = a.GetMethodInfo().Name;
	if (excludedOperators != null
	 && excludedOperators.Contains(name))
	{
		return false;
	}
	
	// Create default for expression execution
	object def = type.IsValueType
		? Activator.CreateInstance(type)
		: null;
	var ce = Expression.Constant(def, type);
	
	// Check if the operator is defined
	try
	{
		// If the operator is defined for the underlying type, the following operation is successful
		a(ce);
		return true;
	}
	catch
	{
		// If the operatior isn't defined, an exception is thrown.
		// But there can be an exception for the underlying type.
		// If the type is defined as an exception, and the operator is defined as an exception as well,
		// True will be returned. If the exception isn't defined, False will be returned.
		return _unaryExpressionExceptions.ContainsKey(type)
			&& _unaryExpressionExceptions[type].Contains(a);
	}
}
#>